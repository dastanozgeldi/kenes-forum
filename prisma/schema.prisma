generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Note {
    id        String   @id @default(uuid())
    filename  String
    createdAt DateTime @default(now())
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    room      Room?    @relation(fields: [roomId], references: [id])
    roomId    String?
}

model Hometask {
    id        String    @id @default(uuid())
    title     String
    content   String?
    topic     Topic     @relation(fields: [topicId], references: [id])
    topicId   String
    due       DateTime?
    createdAt DateTime  @default(now())
    user      User      @relation(fields: [userId], references: [id])
    userId    String
    finished  Boolean   @default(false)
}

model ParticipantsInRooms {
    room       Room     @relation(fields: [roomId], references: [id])
    roomId     String
    user       User     @relation(fields: [userId], references: [id])
    userId     String
    assignedAt DateTime @default(now())

    @@id([roomId, userId])
}

model Topic {
    id        String     @id @default(uuid())
    name      String     @unique
    createdAt DateTime   @default(now())
    rooms     Room[]
    hometasks Hometask[]
}

model PinnedRoom {
    id     String @id @default(uuid())
    room   Room   @relation(fields: [roomId], references: [id])
    roomId String
    user   User   @relation(fields: [userId], references: [id])
    userId String
}

model Message {
    id          String   @id @default(uuid())
    content     String
    // To return `Date`s intact through the API we need to add data transformers
    // https://trpc.io/docs/data-transformers
    createdAt   DateTime @unique @default(now())
    updatedAt   DateTime @unique @default(now())
    // Foreign keys
    author      User?    @relation(fields: [authorId], references: [id])
    authorId    String?
    authorName  String?
    authorImage String?
    room        Room?    @relation(fields: [roomId], references: [id])
    roomId      String?
}

model Room {
    id           String                @id @default(uuid())
    title        String
    description  String
    createdAt    DateTime              @default(now())
    updatedAt    DateTime              @default(now()) @updatedAt
    participants ParticipantsInRooms[]
    user         User?                 @relation(fields: [userId], references: [id])
    userId       String?
    topic        Topic?                @relation(fields: [topicId], references: [id])
    topicId      String?
    notes        Note[]
    pinnedRooms  PinnedRoom[]
    isPinned     Boolean               @default(false)
    messages      Message[]
}

model School {
    id        String   @id @default(uuid())
    name      String
    students  User[]
    createdAt DateTime @default(now())
    updatedAt DateTime @default(now()) @updatedAt
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String                @id @default(cuid())
    name          String?
    username      String?               @unique
    email         String?               @unique
    emailVerified DateTime?
    image         String?
    bio           String?
    school        School?               @relation(fields: [schoolId], references: [id])
    schoolId      String?
    grade         String?
    accounts      Account[]
    sessions      Session[]
    rooms         ParticipantsInRooms[]
    Room          Room[]
    hometasks     Hometask[]
    notes         Note[]
    pinnedRooms   PinnedRoom[]
    messages       Message[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
